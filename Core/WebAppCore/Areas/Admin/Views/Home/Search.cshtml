@using WebCore.Entities;
@using WebAppCoreNew.Common;
@using WebModelCore;
@using System.Linq;
@using System.Collections.Generic;
@using WebModelCore.CodeInfo;
@using WebModelCore.Common;
@using Newtonsoft.Json;
@using WebAppCore.Common
@model string
@{
    var moduleInfoModel = (ModuleInfoModel)ViewBag.ModuleInfo;
    ViewBag.Title = moduleInfoModel.ModulesInfo.ModuleName.GetLanguageTitle(moduleInfoModel.LanguageInfo);
    var fieldSubmited = (List<ModuleFieldInfo>)ViewBag.FieldSubmited;
    var groupMods = (List<GroupMod>)ViewBag.RoleUser;

    var btnInfos = moduleInfoModel.ButtonsInfo == null ? new List<ButtonInfo>() : moduleInfoModel.ButtonsInfo;
    var moduleInfo = moduleInfoModel.ModulesInfo == null ? new ModuleInfo() : moduleInfoModel.ModulesInfo;
    var moduleFieldInfo = moduleInfoModel.FieldsInfo == null ? new List<ModuleFieldInfo>() : moduleInfoModel.FieldsInfo;
    var parrs = moduleInfoModel.ButtonParamsInfo == null ? new List<ButtonParamInfo>() : moduleInfoModel.ButtonParamsInfo;
    var codeInfos = ViewBag.DataCombobox == null ? new List<CodeInfoModel>() : (List<CodeInfoModel>)ViewBag.DataCombobox;
    var checkColAction = btnInfos.Where(x => x.ButtonName.ToUpper() == EDefModBtn.BTN_VIEW.ToString().ToUpper() || x.ButtonName.ToUpper() == EDefModBtn.BTN_EDIT.ToString().ToUpper());
    var checkBtnViews = btnInfos.Where(x => x.ButtonName.ToUpper() == EDefModBtn.BTN_VIEW.ToString().ToUpper());
    var checkBtnEdits = btnInfos.Where(x => x.ButtonName.ToUpper() == EDefModBtn.BTN_EDIT.ToString().ToUpper());
    var checkBtnDels = btnInfos.Where(x => x.ButtonName.ToUpper() == EDefModBtn.BTN_DELETE.ToString().ToUpper());
    var checkBtnAssRole = btnInfos.Where(x => x.ButtonName.ToUpper() == EDefModBtn.BTN_ASSIGN_ROLE.ToString().ToUpper());
    var checkBtnAssUsers = btnInfos.Where(x => x.ButtonName.ToUpper() == EDefModBtn.BTN_ASSIGN_USER.ToString().ToUpper());
    if (groupMods == null)
    {
        groupMods = new List<GroupMod>();
        groupMods.Add(new GroupMod { GroupId = "1", ModId = moduleInfoModel.ModulesInfo.ModuleID });
        if (checkBtnEdits.Any())
            groupMods.Add(new GroupMod { GroupId = "1", ModId = checkBtnEdits.First().CallModuleID });
        if (checkBtnDels.Any())
            groupMods.Add(new GroupMod { GroupId = "1", ModId = checkBtnDels.First().CallModuleID });

    }
    var checkBtnDel = checkBtnDels.Any();
    var checkBtnView = checkBtnViews.Any();
    var checkBtnEdit = checkBtnEdits.Any();
    var checkBtnAssignRole = checkBtnAssRole.Any();
    var checkBtnAssignUser = checkBtnAssUsers.Any();
    var parramEdit = new List<ButtonParamInfo>();
    var parramView = new List<ButtonParamInfo>();

    var parramDel = new List<ButtonParamInfo>();
    var parramAssignUser = new List<ButtonParamInfo>();
    if (checkBtnView)
    {
        var parramViews = parrs.Where(x => x.ButtonName == EDefModBtn.BTN_VIEW.ToString());
        if (parramViews.Any())
        {
            parramView = parramViews.ToList();
        }
    }
    if (checkBtnEdit)
    {
        var parramEdits = parrs.Where(x => x.ButtonName == EDefModBtn.BTN_EDIT.ToString());
        if (parramEdits.Any())
        {
            parramEdit = parramEdits.ToList();
        }
    }
    if (checkBtnDel)
    {
        var parramDels = parrs.Where(x => x.ButtonName == EDefModBtn.BTN_DELETE.ToString());
        if (parramDels.Any())
        {
            parramDel = parramDels.ToList();
        }
    }
    if (checkBtnAssignUser)
    {
        var parramAssignUsers = parrs.Where(x => x.ButtonName == EDefModBtn.BTN_ASSIGN_USER.ToString());
        if (parramAssignUsers.Any())
        {
            parramAssignUser = parramAssignUsers.ToList();
        }
    }
    var modId = Model;
    var totalRow = 0;
    var currPage = int.Parse("0" + ViewBag.CurrPage);
}




@using (Html.BeginForm("Submit", "Home", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal form-row-seperated", @id = "news-validate-form" }))
{
    <input type="hidden" id="txtModId" name="ModId" value="@modId" />
    var fieldSearch = moduleFieldInfo.Where(x => x.FieldGroup == FLDGROUP.SEARCH_CONDITION && x.HideWeb != "Y").ToList();
    var row = fieldSearch.Count / 6;
    var rowNotFull = fieldSearch.Count % 6;
    bool hasShowBtnSearch = false;
    int rowSearch = row + (rowNotFull > 0 ? 1 : 0);
    <div class="col-12 margin-top-10  not-show-print">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Tìm kiếm @ViewBag.Title</h3>
            </div>
            <div class="card-body">
                @{
                    for (int i = 0; i < rowSearch; i++)
                    {
                        <div class="row margin-top-10 not-show-print">
                            <div class="col-12 col-lg-12">
                                @{
                                    int numColumn = 6;
                                    if (i != rowSearch - 1)
                                    {
                                        for (int k = 0; k < numColumn; k++)
                                        {
                                            var fieldTemp = fieldSearch[i * numColumn + k];
                                            <div class="form-group left col-lg-2 col-2 not-show-print">
                                                @Html.Raw(fieldTemp.GetHtmlControl(codeInfos, moduleInfoModel.LanguageInfo, "", null, moduleInfoModel.ModulesInfo.ModuleName, "", 0, fieldSubmited))
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        for (int k = 0; k < rowNotFull; k++)
                                        {
                                            var fieldTemp = fieldSearch[i * numColumn + k];
                                            <div class="form-group left col-lg-2 col-2 not-show-print">
                                                @Html.Raw(fieldTemp.GetHtmlControl(codeInfos, moduleInfoModel.LanguageInfo, "", null, moduleInfoModel.ModulesInfo.ModuleName, "", 0, fieldSubmited))
                                            </div>
                                        }
                                    }

                                    if (i == (rowSearch - 1) && rowNotFull < numColumn)
                                    {
                                        <div class="form-group left col-lg-2 col-2 not-show-print">
                                            <button class="btn btn-info btn-search btn-flat" type="submit" id="btnSearch" value="Search"> <i class="fa fa-search"></i> Tìm kiếm</button>
                                        </div>
                                        hasShowBtnSearch = true;
                                        <div class="form-group left col-lg-2 col-2 d-none not-show-print">
                                            <button class="btn btn-info btn-search btn-flat" type="submit" id="btnExport" name="export" value="Export"> <i class="fa fa-search"></i> Export</button>
                                        </div>
                                    }
                                }

                            </div>
                        </div>
                    }
                    if (!hasShowBtnSearch)
                    {
                        <div class="row margin-top-10 not-show-print">
                            <div class="col-12 col-lg-12">
                                <div class="form-group left col-lg-2 col-2">
                                    <button class="btn btn-info btn-search btn-flat" type="submit" id="btnSearch"> <i class="fa fa-search"></i> Tìm kiếm</button>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
    <input type="hidden" value="@currPage" name="CurrPage" id="currPage" />
}
<div class="col-12">
    <div class="card">
        <div class="card-header">
            <div class="col-3 col-lg-3 left not-show-print">
                <h3 class="card-title">Kết quả tìm kiếm</h3>
            </div>
            @{
                if (btnInfos != null)
                {
                    if (btnInfos.Count() > 0)
                    {
                        <div class="col-9 col-lg-9 right not-show-print">
                            @{
                                foreach (var item in btnInfos)
                                {
                                    if (item.ButtonName.ToUpper() != EDefModBtn.BTN_VIEW.ToString().ToUpper() && item.ButtonName.ToUpper() != EDefModBtn.BTN_EDIT.ToString().ToUpper())
                                    {
                                        <div class="right margin-r-10">
                                            @if (checkBtnDels.Any())
                                            {
                                                <input type="hidden" value="@checkBtnDels.First().CallSubModule" id="txtSubModDel" />
                                                <input type="hidden" value="@checkBtnDels.First().CallModuleID" id="txtModDel" />
                                            }

                                            @{
                                                if (item.ButtonName.ToUpper() == EDefModBtn.BTN_ADD.ToString().ToUpper() && checkBtnEdits.Count() > 0 && (groupMods.Where(x => x.ModId == checkBtnEdits.First().CallModuleID).Count() > 0))
                                                {
                                                    <a href="@Url.Action("Edit","Home",new {modSearchId=modId, modId=checkBtnEdits.First().CallModuleID,subModId=checkBtnEdits.First().CallSubModule,parram=ViewBag.ParramMods})"><button class="btn btn-default btn-primary" name=" @item.ButtonName"><i class="fa fa-plus" title="Thêm"></i> @item.ButtonName.GetLanguageBtn(moduleInfoModel.LanguageInfo)</button></a>
                                                }
                                                @*else if (item.ButtonName.ToUpper() == EDefModBtn.BTN_DELETE.ToString().ToUpper() && groupMods.Where(x => x.ModId == checkBtnDels.First().CallModuleID).Count() > 0)
                                                    {
                                                        <button class="btn btn-default" id="btn@(item.ButtonName)" name="@item.ButtonName"><i class="fa fa-trash" title="Xóa"></i> @item.ButtonName.GetLanguageBtn(moduleInfoModel.LanguageInfo)</button>
                                                        <input type="hidden" value="@checkBtnDels.First().CallSubModule" id="txtSubModDel" />
                                                        <input type="hidden" value="@checkBtnDels.First().CallModuleID" id="txtModDel" />
                                                    }*@
                                                else if (item.ButtonName.ToUpper() == EDefModBtn.BTN_EXPORT.ToString().ToUpper())
                                                {
                                                    <button class="btn btn-default" id="btn@(item.ButtonName)" name="@item.ButtonName" onclick="$('#btnExport').click()"><i class="fa fa-file-excel" title="Xuất Excel"></i>Xuất Excel</button>
                                                }
                                                else if (item.ButtonName.ToUpper() == EDefModBtn.BTN_PRINT.ToString().ToUpper())
                                                {
                                                    <button class="btn btn-default btn-print" id="btn@(item.ButtonName)" name="@item.ButtonName"><i class="fa fa-print" title="IN"></i>In</button>
                                                }
                                                else if (groupMods.Where(x => x.ModId == item.CallModuleID).Count() > 0)
                                                {
                                                    if (item.ButtonName.ToUpper() != EDefModBtn.BTN_DELETE.ToString().ToUpper())
                                                    {
                                                        <a href="@Url.Action("Index","Home",new {modId=item.CallModuleID} )" class="btn btn-default" id="btn@(item.ButtonName)" name="@item.ButtonName"> @item.ButtonName.GetLanguageBtn(moduleInfoModel.LanguageInfo)</a>
                                                    }
                                                }
                                            }
                                        </div>
                                    }
                                }
                            }
                        </div>
                    }
                }
            }
        </div>
        <div class="card-body">
            <div class="row col-md-12 col-lg-12 margin-top-10">
                <div class="table-responsive">
                    <table class="table table-bordered table-responsive-md table-responsive-lg table-striped">
                        <thead class="h-head">
                            @{
                                @*if (checkBtnDel)
                                        {
                                        <th><input type="checkbox" class="chk-all" /></th>
                                    }*@
                                var fieldGrid = moduleFieldInfo.Where(x => x.FieldGroup == FLDGROUP.SEARCH_COLUMN).ToList();
                                foreach (var item in fieldGrid)
                                {
                                    if (item.HideWeb == "Y")
                                    {
                                        continue;
                                    }
                                <th>@item.FieldName.GetLanguage(moduleInfoModel.LanguageInfo, moduleInfoModel.ModulesInfo.ModuleName)</th>
                            }

                            if (checkColAction.Any())
                            {
                                <th>Hành động</th>
                            }
                            }
                            </th>
                            <tbody id="tbody">
                                @{
                                    var data = (List<dynamic>)ViewBag.DataSearch;
                                    if (parramEdit.Any() && data != null)
                                    {
                                        foreach (var item in parramEdit)
                                        {

                                            foreach (var dataSearch in data)
                                            {
                                                var dataRows = ((Newtonsoft.Json.Linq.JContainer)dataSearch);
                                                foreach (var datarow in dataRows)
                                                {
                                                    var columnName = ((Newtonsoft.Json.Linq.JProperty)datarow).Name;
                                                    if (columnName.ToUpper() == item.FieldName.ToUpper())
                                                    {
                                                        if (datarow != null && ((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)datarow).Value) != null)
                                                        {
                                                            item.Value = (((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)datarow).Value).Value ?? "").ToString();
                                                        }

                                                    }

                                                }
                                            }
                                        }
                                    }
                                    if (data == null)
                                    {
                                        <tr>
                                            <td colspan="@(fieldGrid.Count()+(checkBtnDel?1:0) -1 + (checkColAction.Any()?1:0))">Không có dữ liệu</td>
                                        </tr>
                                    }
                                    else if (!data.Any())
                                    {
                                        <tr>
                                            <td colspan="@(fieldGrid.Count()+(checkBtnDel?1:0)-1 + (checkColAction.Any()?1:0))">Không có dữ liệu</td>
                                        </tr>
                                    }
                                    else
                                    {
                                        foreach (var item in data)
                                        {
                                            var dataRows = ((Newtonsoft.Json.Linq.JContainer)item);
                                            var valueEdit = "";
                                            var valueDelete = "";
                                            var checkAll = 1;
                                            var dataModQc = "";
                                            var attrsetId = 0;
                                            var barcode = "";
                                            var groupId = 0;
                                            var modeCallEdit = "";
                                            if (checkBtnViews.Any())
                                            {
                                                modeCallEdit = checkBtnViews.First().CallModuleID;
                                            }


                                            <tr>
                                                @*@{
                                                        if (checkBtnDel)
                                                        {
                                                            <td><input type="checkbox" class="chk" /></td>
                                                        }
                                                    }*@
                                                @foreach (var col in fieldGrid)
                                                {
                                                    if (col.HideWeb == "Y")
                                                    {
                                                        continue;
                                                    }
                                                    <td>
                                                        @{
                                                            foreach (var column in dataRows)
                                                            {
                                                                var columnName = ((Newtonsoft.Json.Linq.JProperty)column).Name;
                                                                if (modeCallEdit == "02519" && columnName.ToUpper() == "GroupId".ToUpper())
                                                                {
                                                                    groupId = int.Parse(((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value.ToString());
                                                                }
                                                                if (columnName.ToUpper() == col.FieldName.ToUpper())
                                                                {
                                                                    if (!string.IsNullOrEmpty(col.ListSource))
                                                                    {
                                                                        if (((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value != null)
                                                                        {
                                                                            col.FieldID = ((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value.ToString();
                                                                            var text = col.GetValueGridControl(codeInfos);
                                                                            <span field="@col.FieldName" title="@text">@(text.Length > 50 ? text.Substring(0, 50) + "..." : text)</span>
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        var text = (((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value ?? "").ToString();
                                                                        <span field="@col.FieldName" title="@text">@(text.Length > 50 ? text.Substring(0, 50) + "..." : text)</span>
                                                                    }
                                                                    checkAll++;
                                                                }
                                                                foreach (var prrView in parramView)
                                                                {
                                                                    if (prrView.ColumnName.ToUpper() == columnName.ToUpper())
                                                                    {
                                                                        prrView.Value = (((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value ?? "").ToString();
                                                                    }
                                                                }
                                                                foreach (var prrEdit in parramEdit)
                                                                {
                                                                    if (prrEdit.ColumnName.ToUpper() == columnName.ToUpper())
                                                                    {
                                                                        prrEdit.Value = (((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value ?? "").ToString();
                                                                    }
                                                                }
                                                                foreach (var prrDel in parramDel)
                                                                {
                                                                    if (prrDel.ColumnName.ToUpper() == columnName.ToUpper())
                                                                    {
                                                                        prrDel.Value = (((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value ?? "").ToString();
                                                                    }
                                                                }
                                                                foreach (var prrAssign in parramAssignUser)
                                                                {
                                                                    if (prrAssign.ColumnName.ToUpper() == columnName.ToUpper())
                                                                    {
                                                                        prrAssign.Value = (((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value ?? "").ToString();
                                                                    }
                                                                }
                                                                if (columnName.ToUpper() == "TotalRow".ToUpper())
                                                                {
                                                                    totalRow = int.Parse(((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value.ToString());
                                                                }
                                                            }
                                                        }
                                                    </td>
                                                }
                                                @if (checkColAction.Any())
                                                {
                                                    <td>
                                                        @{
                                                            if (checkBtnView)
                                                            {
                                                                <a class="btn-sm btn-info" href="@Url.Action("Edit","Home",new { modId=checkBtnViews.First().CallModuleID,modSearchId=modId,subModId=checkBtnViews.First().CallSubModule,fieldNameEdit=String.Join(",",parramView.Select(x=>x.FieldName)), parram=Json.Serialize(parramView),edit=false})"><i class="fa fa-eye" title="VIEW"></i></a>
                                                            }

                                                            if (checkBtnEdit && groupMods.Where(x => x.ModId == checkBtnEdits.First().CallModuleID).Count() > 0 && (checkBtnViews.Count() > 0 && checkBtnViews.First().CallModuleID != "02519"))
                                                            {
                                                                <a class="btn-sm btn-warning" href="@Url.Action("Edit","Home",new { modId=checkBtnEdits.First().CallModuleID,modSearchId=modId,subModId=checkBtnEdits.First().CallSubModule,fieldNameEdit=String.Join(",",parramEdit.Select(x=>x.FieldName)), parram=Json.Serialize(parramEdit)})"><i class="fa fa-pencil-alt" title="EDIT"></i></a>
                                                            }
                                                            if (checkBtnAssignRole)
                                                            {
                                                                <a class="btn-sm btn-info" href="@Url.Action("Edit","Home",new { modId=checkBtnAssRole.First().CallModuleID,modSearchId=modId,subModId=checkBtnEdits.First().CallSubModule,fieldNameEdit=String.Join(",",parramEdit.Select(x=>x.FieldName)), parram=Json.Serialize(parramEdit)})"><i class="fa fa-cog" title="Phân quyền"></i></a>
                                                            }
                                                            if (checkBtnAssignUser)
                                                            {
                                                                <a class="btn-sm btn-info" href="@Url.Action("Search","Home",new { modId=checkBtnAssUsers.First().CallModuleID,fieldNameEdit=String.Join(",",parramEdit.Select(x=>x.FieldName)), parramMods=Json.Serialize(parramAssignUser)})"><i class="fa fa-user" title="Gán User"></i></a>
                                                            }
                                                            if (checkBtnDel && groupMods.Where(x => x.ModId == checkBtnDels.First().CallModuleID).Count() > 0)
                                                            {
                                                                <input type="hidden" class="key-Del" value="@Json.Serialize(parramDel).ToString()" class="txtKeyDel" />
                                                                <a href="#" class="action-del btn-danger btn-sm delete-asset" key-del="@Json.Serialize(parramDel).ToString()"><i class="fa fa-trash-alt" title="DEL"></i></a>
                                                            }
                                                        }
                                                    </td>
                                                }
                                            </tr>
                                        }
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                    @{
                        if (totalRow > CommonMethod.PageSize)
                        {
                            <div class="col-md-12 col-ld-12 no-padding">
                                @Html.Partial("_pagination", new SortAndPageModel { PageSize = CommonMethod.PageSize, TotalRecordCount = totalRow, CurrentPageIndex = currPage })
                            </div>
                        }
                    }


                </div>

                <input type="hidden" value="@Url.Action("Delete","Home")" id="urlDel" />
            </div>
        </div>
    </div>


    <script>
        function PagerClick(page) {
            $("#currPage").val(page);
            $("#btnSearch").click();
        }
        $(".btn-print").click(function () {
            var modId;
            if ($("#txtModId").length > 0) {
                var modId = $("#txtModId").val();
                if (modid = "03524") {//Trường hợp in list homo của piaggio
                    var marketCode = $("#MARKET_CODE").val();
                    var skuCode = $("#SKU_CODE").val();
                    $(".sku-code").each(function () {
                        $(this).html(skuCode);
                    });
                    $(".market-code").each(function () {
                        $(this).html(marketCode);
                    });
                }
            }
            window.print();
        });
    </script>