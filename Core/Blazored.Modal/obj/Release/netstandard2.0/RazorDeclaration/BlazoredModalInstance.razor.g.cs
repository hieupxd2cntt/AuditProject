#pragma checksum "G:\ATuanLM\AuditProject\Audit\Program\Core\Blazored.Modal\BlazoredModalInstance.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e99d86e3cbbd75c1df228655805119c218274a7a"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Blazored.Modal
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 1 "G:\ATuanLM\AuditProject\Audit\Program\Core\Blazored.Modal\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 2 "G:\ATuanLM\AuditProject\Audit\Program\Core\Blazored.Modal\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
    public partial class BlazoredModalInstance : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 28 "G:\ATuanLM\AuditProject\Audit\Program\Core\Blazored.Modal\BlazoredModalInstance.razor"
       
    [CascadingParameter] private BlazoredModal Parent { get; set; }
    [CascadingParameter] private ModalOptions GlobalModalOptions { get; set; }

    [Parameter] public ModalOptions Options { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public RenderFragment Content { get; set; }
    [Parameter] public Guid Id { get; set; }

    private string Position { get; set; }
    private string Class { get; set; }
    private bool HideHeader { get; set; }
    private bool HideCloseButton { get; set; }
    private bool DisableBackgroundCancel { get; set; }

    protected override void OnInitialized()
    {
        ConfigureInstance();
    }

    /// <summary>
    /// Sets the title for the modal being displayed
    /// </summary>
    /// <param name="title">Text to display as the title of the modal</param>
    public void SetTitle(string title)
    {
        Title = title;
        StateHasChanged();
    }

    /// <summary>
    /// Closes the modal with a default Ok result />.
    /// </summary>
    public void Close()
    {
        Close(ModalResult.Ok<object>(null));
    }

    /// <summary>
    /// Closes the modal with the specified <paramref name="modalResult"/>.
    /// </summary>
    /// <param name="modalResult"></param>
    public void Close(ModalResult modalResult)
    {
        Parent.DismissInstance(Id, modalResult);
    }

    /// <summary>
    /// Closes the modal and returns a cancelled ModalResult.
    /// </summary>
    public void Cancel()
    {
        Parent.DismissInstance(Id, ModalResult.Cancel());
    }

    private void ConfigureInstance()
    {
        Position = SetPosition();
        Class = SetClass();
        HideHeader = SetHideHeader();
        HideCloseButton = SetHideCloseButton();
        DisableBackgroundCancel = SetDisableBackgroundCancel();
    }

    private string SetPosition()
    {
        ModalPosition position;
        if (Options.Position.HasValue)
        {
            position = Options.Position.Value;
        }
        else if (GlobalModalOptions.Position.HasValue)
        {
            position = GlobalModalOptions.Position.Value;
        }
        else
        {
            position = ModalPosition.Center;
        }

        switch (position)
        {
            case ModalPosition.Center:
                return "blazored-modal-center";
            case ModalPosition.TopLeft:
                return "blazored-modal-topleft";
            case ModalPosition.TopRight:
                return "blazored-modal-topright";
            case ModalPosition.BottomLeft:
                return "blazored-modal-bottomleft";
            case ModalPosition.BottomRight:
                return "blazored-modal-bottomright";
            default:
                return "blazored-modal-center";
        }
    }

    private string SetClass()
    {
        if (!string.IsNullOrWhiteSpace(Options.Class))
            return Options.Class;

        if (!string.IsNullOrWhiteSpace(GlobalModalOptions.Class))
            return GlobalModalOptions.Class;

        return "blazored-modal";
    }

    private bool SetHideHeader()
    {
        if (Options.HideHeader.HasValue)
            return Options.HideHeader.Value;

        if (GlobalModalOptions.HideHeader.HasValue)
            return GlobalModalOptions.HideHeader.Value;

        return false;
    }

    private bool SetHideCloseButton()
    {
        if (Options.HideCloseButton.HasValue)
            return Options.HideCloseButton.Value;

        if (GlobalModalOptions.HideCloseButton.HasValue)
            return GlobalModalOptions.HideCloseButton.Value;

        return false;
    }

    private bool SetDisableBackgroundCancel()
    {
        if (Options.DisableBackgroundCancel.HasValue)
            return Options.DisableBackgroundCancel.Value;

        if (GlobalModalOptions.DisableBackgroundCancel.HasValue)
            return GlobalModalOptions.DisableBackgroundCancel.Value;

        return false;
    }

    private void HandleBackgroundClick()
    {
        if (DisableBackgroundCancel) return;

        Parent.CancelInstance(Id);
    }


#line default
#line hidden
    }
}
#pragma warning restore 1591
