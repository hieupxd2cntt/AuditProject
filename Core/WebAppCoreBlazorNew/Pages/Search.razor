@page "/Search"
@using Newtonsoft.Json
@using WebModel;
@using System.Web.Mvc
@using WebModel.CodeInfo;
@using WebModel.Common;
@using WebAppCoreBlazorNew.Common;
@using WebAppCoreBlazorWebAssembly.Service
@using  Microsoft.Extensions.Configuration
@using WebAppCoreBlazorNew.BUS
@using WebCore.Entities;
@using Microsoft.Extensions.Caching.Distributed
@inject NavigationManager NavigationManager
@inject IConfiguration iConfiguration

@inject IDistributedCache distributedCache
@inject IModuleService moduleService
<input type="hidden" id="txtModId" name="ModId" value="@modId" />
@{
    var fieldSearch = moduleFieldInfo==null? new List<ModuleFieldInfo>() : moduleFieldInfo.Where(x => x.FieldGroup == FLDGROUP.SEARCH_CONDITION && x.HideWeb != "Y").ToList();
    var row = fieldSearch.Count() / 6;
    var rowNotFull = fieldSearch.Count() % 6;
    bool hasShowBtnSearch = false;
    int rowSearch = row + (rowNotFull > 0 ? 1 : 0);
}

<div class="col-12 margin-top-10  not-show-print">
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Tìm kiếm </h3>
        </div>
        <div class="card-body">
            @{
                <div class="row">
                    <div class="form-group">
                        <label>Thuộc tính</label>
                        <select name="controlName" id="controlName" class="form-control select2">
                            @foreach (var control in lstControl)
                            {
                                <option value="@control.Value">@control.Text</option>
                            }
                        </select>
                    </div>
                    <div class="col-2">
                        <button class="btn btn-info btn-search btn-flat" type="button" id="btnAddCondition"> <i class="fa fa-plus"></i> Add</button>
                    </div>
                </div>
                <div class="row" id="divSearchCondition"> </div>
                @if (!hasShowBtnSearch)
                {
                    <div class="row margin-top-10 not-show-print">
                        <div class="col-12 col-lg-12">
                            <div class="form-group left col-lg-2 col-2">
                                <button class="btn btn-info btn-search btn-flat" type="submit" id="btnSearch"> <i class="fa fa-search"></i> Tìm kiếm</button>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

<input type="hidden" value="@currPage" name="CurrPage" id="currPage" />
<div class="col-12">
    <div class="card">
        <div class="card-header">
            <div class="col-3 col-lg-3 left not-show-print">
                <h3 class="card-title">Kết quả tìm kiếm</h3>
            </div>
            @{
                if (btnInfos != null)
                {
                    if (btnInfos.Count() > 0)
                    {
                        <div class="col-9 col-lg-9 right not-show-print">
                            @{
                                foreach (var item in btnInfos)
                                {
                                    if (item.ButtonName.ToUpper() != EDefModBtn.BTN_VIEW.ToString().ToUpper() && item.ButtonName.ToUpper() != EDefModBtn.BTN_EDIT.ToString().ToUpper())
                                    {
                                        <div class="right margin-r-10">
                                            @if (checkBtnDels.Any())
                                            {
                                                <input type="hidden" value="@checkBtnDels.First().CallSubModule" id="txtSubModDel" />
                                                <input type="hidden" value="@checkBtnDels.First().CallModuleID" id="txtModDel" />
                                            }

                                            @{
                                                if (item.ButtonName.ToUpper() == EDefModBtn.BTN_ADD.ToString().ToUpper() && checkBtnEdits.Count() > 0 && (groupMods.Where(x => x.ModId == checkBtnEdits.First().CallModuleID).Count() > 0))
                                                {
                                                    //<a href="@Url.Action("Edit","Home",new {modSearchId=modId, modId=checkBtnEdits.First().CallModuleID,subModId=checkBtnEdits.First().CallSubModule,parram=ViewBag.ParramMods})"><button class="btn btn-default btn-primary" name=" @item.ButtonName"><i class="fa fa-plus" title="Thêm"></i> @item.ButtonName.GetLanguageBtn(moduleInfoModel.LanguageInfo)</button></a>
                                                }
                                                @*else if (item.ButtonName.ToUpper() == EDefModBtn.BTN_DELETE.ToString().ToUpper() && groupMods.Where(x => x.ModId == checkBtnDels.First().CallModuleID).Count() > 0)
                                                    {
                                                        <button class="btn btn-default" id="btn@(item.ButtonName)" name="@item.ButtonName"><i class="fa fa-trash" title="Xóa"></i> @item.ButtonName.GetLanguageBtn(moduleInfoModel.LanguageInfo)</button>
                                                        <input type="hidden" value="@checkBtnDels.First().CallSubModule" id="txtSubModDel" />
                                                        <input type="hidden" value="@checkBtnDels.First().CallModuleID" id="txtModDel" />
                                                    }*@
                                                else if (item.ButtonName.ToUpper() == EDefModBtn.BTN_EXPORT.ToString().ToUpper())
                                                {
                                                    <button class="btn btn-default" id="btn@(item.ButtonName)" name="@item.ButtonName" onclick="$('#btnExport').click()"><i class="fa fa-file-excel" title="Xuất Excel"></i>Xuất Excel</button>
                                                }
                                                else if (item.ButtonName.ToUpper() == EDefModBtn.BTN_PRINT.ToString().ToUpper())
                                                {
                                                    <button class="btn btn-default btn-print" id="btn@(item.ButtonName)" name="@item.ButtonName"><i class="fa fa-print" title="IN"></i>In</button>
                                                }
                                                else if (groupMods.Where(x => x.ModId == item.CallModuleID).Count() > 0)
                                                {
                                                    if (item.ButtonName.ToUpper() != EDefModBtn.BTN_DELETE.ToString().ToUpper())
                                                    {
                                                        //<a href="@Url.Action("Index","Home",new {modId=item.CallModuleID} )" class="btn btn-default" id="btn@(item.ButtonName)" name="@item.ButtonName"> @item.ButtonName.GetLanguageBtn(moduleInfoModel.LanguageInfo)</a>
                                                    }
                                                }
                                            }
                                        </div>
                                    }
                                }
                            }
                        </div>
                    }
                }
            }
        </div>
        <div class="card-body">
            <div class="row col-md-12 col-lg-12 margin-top-10">
                <div class="table-responsive">
                    <table class="table table-bordered table-responsive-md table-responsive-lg table-striped">
                        <thead class="h-head">
                            @{
                                var fieldGrid = moduleFieldInfo.Where(x => x.FieldGroup == FLDGROUP.SEARCH_COLUMN).ToList();
                                foreach (var item in fieldGrid)
                                {
                                    if (item.HideWeb == "Y")
                                    {
                                        continue;
                                    }
                                <th>@item.FieldName.GetLanguage(moduleInfoModel.LanguageInfo, moduleInfoModel.ModulesInfo.ModuleName)</th>
                            }

                            if (checkColAction.Any())
                            {
                                <th>Hành động</th>
                            }
                            }
                            </thead>
                            <tbody id="tbody">
                                @{
                                    var data = new List<dynamic>()/*ViewBag.DataSearch*/;
                                    if (parramEdit.Any() && data != null)
                                    {
                                        foreach (var item in parramEdit)
                                        {

                                            foreach (var dataSearch in data)
                                            {
                                                var dataRows = ((Newtonsoft.Json.Linq.JContainer)dataSearch);
                                                foreach (var datarow in dataRows)
                                                {
                                                    var columnName = ((Newtonsoft.Json.Linq.JProperty)datarow).Name;
                                                    if (columnName.ToUpper() == item.FieldName.ToUpper())
                                                    {
                                                        if (datarow != null && ((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)datarow).Value) != null)
                                                        {
                                                            item.Value = (((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)datarow).Value).Value ?? "").ToString();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (data == null)
                                    {
                                        <tr>
                                            <td colspan="@(fieldGrid.Count()+(checkBtnDel?1:0) -1 + (checkColAction.Any()?1:0))">Không có dữ liệu</td>
                                        </tr>
                                    }
                                    else if (!data.Any())
                                    {
                                        <tr>
                                            <td colspan="@(fieldGrid.Count()+(checkBtnDel?1:0)-1 + (checkColAction.Any()?1:0))">Không có dữ liệu</td>
                                        </tr>
                                    }
                                    else
                                    {
                                        foreach (var item in data)
                                        {
                                            var dataRows = ((Newtonsoft.Json.Linq.JContainer)item);
                                            var valueEdit = "";
                                            var valueDelete = "";
                                            var checkAll = 1;
                                            var dataModQc = "";
                                            var attrsetId = 0;
                                            var barcode = "";
                                            var groupId = 0;
                                            var modeCallEdit = "";
                                            if (checkBtnViews.Any())
                                            {
                                                modeCallEdit = checkBtnViews.First().CallModuleID;
                                            }
                                            <tr>
                                                @foreach (var col in fieldGrid)
                                                {
                                                    if (col.HideWeb == "Y")
                                                    {
                                                        continue;
                                                    }
                                                    <td>
                                                        @{
                                                            foreach (var column in dataRows)
                                                            {
                                                                var columnName = ((Newtonsoft.Json.Linq.JProperty)column).Name;
                                                                if (modeCallEdit == "02519" && columnName.ToUpper() == "GroupId".ToUpper())
                                                                {
                                                                    groupId = int.Parse(((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value.ToString());
                                                                }
                                                                if (columnName.ToUpper() == col.FieldName.ToUpper())
                                                                {
                                                                    if (!string.IsNullOrEmpty(col.ListSource))
                                                                    {
                                                                        if (((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value != null)
                                                                        {
                                                                            col.FieldID = ((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value.ToString();
                                                                            var text = col.GetValueGridControl(codeInfos);
                                                                            <span field="@col.FieldName" title="@text">@(text.Length > 50 ? text.Substring(0, 50) + "..." : text)</span>
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        var text = (((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value ?? "").ToString();
                                                                        <span field="@col.FieldName" title="@text">@(text.Length > 50 ? text.Substring(0, 50) + "..." : text)</span>
                                                                    }
                                                                    checkAll++;
                                                                }
                                                                foreach (var prrView in parramView)
                                                                {
                                                                    if (prrView.ColumnName.ToUpper() == columnName.ToUpper())
                                                                    {
                                                                        prrView.Value = (((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value ?? "").ToString();
                                                                    }
                                                                }
                                                                foreach (var prrEdit in parramEdit)
                                                                {
                                                                    if (prrEdit.ColumnName.ToUpper() == columnName.ToUpper())
                                                                    {
                                                                        prrEdit.Value = (((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value ?? "").ToString();
                                                                    }
                                                                }
                                                                foreach (var prrDel in parramDel)
                                                                {
                                                                    if (prrDel.ColumnName.ToUpper() == columnName.ToUpper())
                                                                    {
                                                                        prrDel.Value = (((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value ?? "").ToString();
                                                                    }
                                                                }
                                                                foreach (var prrAssign in parramAssignUser)
                                                                {
                                                                    if (prrAssign.ColumnName.ToUpper() == columnName.ToUpper())
                                                                    {
                                                                        prrAssign.Value = (((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value ?? "").ToString();
                                                                    }
                                                                }
                                                                if (columnName.ToUpper() == "TotalRow".ToUpper())
                                                                {
                                                                    totalRow = int.Parse(((Newtonsoft.Json.Linq.JValue)((Newtonsoft.Json.Linq.JProperty)column).Value).Value.ToString());
                                                                }
                                                            }
                                                        }
                                                    </td>
                                                }
                                                @if (checkColAction.Any())
                                                {
                                                    <td>
                                                        @{
                                                            if (checkBtnView)
                                                            {
                                                                @*<a class="btn-sm btn-info" href="@Url.Action("Edit","Home",new { modId=checkBtnViews.First().CallModuleID,modSearchId=modId,subModId=checkBtnViews.First().CallSubModule,fieldNameEdit=String.Join(",",parramView.Select(x=>x.FieldName)), parram=Json.Serialize(parramView),edit=false})"><i class="fa fa-eye" title="VIEW"></i></a>*@
                                                            }

                                                            if (checkBtnEdit && groupMods.Where(x => x.ModId == checkBtnEdits.First().CallModuleID).Count() > 0 && (checkBtnViews.Count() > 0 && checkBtnViews.First().CallModuleID != "02519"))
                                                            {
                                                                @*<a class="btn-sm btn-warning" href="@Url.Action("Edit","Home",new { modId=checkBtnEdits.First().CallModuleID,modSearchId=modId,subModId=checkBtnEdits.First().CallSubModule,fieldNameEdit=String.Join(",",parramEdit.Select(x=>x.FieldName)), parram=Json.Serialize(parramEdit)})"><i class="fa fa-pencil-alt" title="EDIT"></i></a>*@
                                                            }
                                                            if (checkBtnAssignRole)
                                                            {
                                                                @*<a class="btn-sm btn-info" href="@Url.Action("Edit","Home",new { modId=checkBtnAssRole.First().CallModuleID,modSearchId=modId,subModId=checkBtnEdits.First().CallSubModule,fieldNameEdit=String.Join(",",parramEdit.Select(x=>x.FieldName)), parram=Json.Serialize(parramEdit)})"><i class="fa fa-cog" title="Phân quyền"></i></a>*@
                                                            }
                                                            if (checkBtnAssignUser)
                                                            {
                                                                @*<a class="btn-sm btn-info" href="@Url.Action("Search","Home",new { modId=checkBtnAssUsers.First().CallModuleID,fieldNameEdit=String.Join(",",parramEdit.Select(x=>x.FieldName)), parramMods=Json.Serialize(parramAssignUser)})"><i class="fa fa-user" title="Gán User"></i></a>*@
                                                            }
                                                            if (checkBtnDel && groupMods.Where(x => x.ModId == checkBtnDels.First().CallModuleID).Count() > 0)
                                                            {
                                                                <input type="hidden" value="@Newtonsoft.Json.JsonConvert.SerializeObject(parramDel).ToString()" class="txtKeyDel key-Del" />
                                                                <a href="#" class="action-del btn-danger btn-sm delete-asset" key-del="@Newtonsoft.Json.JsonConvert.SerializeObject(parramDel).ToString()"><i class="fa fa-trash-alt" title="DEL"></i></a>
                                                            }
                                                        }
                                                    </td>
                                                }
                                            </tr>
                                        }
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                    @*@{
                            if (totalRow > CommonMethod.PageSize)
                            {
                                <div class="col-md-12 col-ld-12 no-padding">
                                    @Html.Partial("_pagination", new SortAndPageModel { PageSize = CommonMethod.PageSize, TotalRecordCount = totalRow, CurrentPageIndex = currPage })
                                </div>
                            }
                        }*@
                </div>
                @*<input type="hidden" value="@Url.Action("Delete","Home",new { area = "Admin" })" id="urlDel" />*@
                @*<input type="hidden" id="urlLoadModSearchControl" value="@Url.Action("AjaxAddControlModSearch","Home",new { area = "Admin" })" />*@
            </div>
        </div>
    </div>
    <SurveyPrompt Title="How is Blazor working for you?" />
    @code{
        //[Parameter]
        public string modId { get; set; } = "03200";
        //[Parameter]
        public string parramMods { get; set; } = "";
        public string Title { get; set; } = "";
        private string Schema { get; set; } = "core";
        public ModuleInfoModel moduleInfoModel { get; set; } = new ModuleInfoModel();
        public ModuleInfoModel ModuleInfo { get; set; } = new ModuleInfoModel();
        public List<ModuleFieldInfo> moduleFieldInfo { get; set; } = new List<ModuleFieldInfo>();
        public List<SelectListItem> lstControl { get; set; } = new List<SelectListItem>();
        public List<ModuleFieldInfo> fieldSubmited { get; set; } = new List<ModuleFieldInfo>();
        public List<GroupMod> groupMods { get; set; } = new List<GroupMod>();
        public List<ButtonInfo> btnInfos { get; set; } = new List<ButtonInfo>();
        public List<CodeInfoModel> codeInfos { get; set; } = new List<CodeInfoModel>();
        public List<ButtonInfo> checkBtnViews { get; set; } = new List<ButtonInfo>();
        public List<ButtonInfo> checkColAction { get; set; } = new List<ButtonInfo>();
        public List<ButtonInfo> checkBtnEdits { get; set; } = new List<ButtonInfo>();
        public List<ButtonInfo> checkBtnDels { get; set; } = new List<ButtonInfo>();
        public List<ButtonInfo> checkBtnAssRole { get; set; } = new List<ButtonInfo>();
        public List<ButtonInfo> checkBtnAssUsers { get; set; } = new List<ButtonInfo>();

        public List<GroupMod> RoleUser { get; set; } = new List<GroupMod>();

        public bool checkBtnDel { get; set; }
        public bool checkBtnView { get; set; }
        public bool checkBtnEdit { get; set; }
        public bool checkBtnAssignRole { get; set; }
        public bool checkBtnAssignUser { get; set; }


        public List<ButtonParamInfo> parramEdit { get; set; } = new List<ButtonParamInfo>();
        public List<ButtonParamInfo> parramView { get; set; } = new List<ButtonParamInfo>();
        public List<ButtonParamInfo> parramDel { get; set; } = new List<ButtonParamInfo>();
        public List<ButtonParamInfo> parramAssignUser { get; set; } = new List<ButtonParamInfo>();
        public List<CodeInfoModel> DataCombobox { get; set; } = new List<CodeInfoModel>();
        public int currPage { get; set; }
        public int totalRow { get; set; }
        public List<dynamic> DataSearch { get; set; } = new List<dynamic>();
        protected override async Task OnInitializedAsync()
        {
            try
            {
                //if (string.IsNullOrEmpty(HttpContext.Session.GetString("UserName")) && modId.ToLower() != ConstMod.ModListHomo.ToLower())
                //{
                //    return RedirectToAction("Login", "Home");
                //    NavigationManager.NavigateTo("PageToRedirect");
                //}
                lstControl = new List<SelectListItem>();
                moduleFieldInfo = new List<ModuleFieldInfo>();
                HomeBus homeBus = new HomeBus(moduleService, iConfiguration, distributedCache);
                var data = await homeBus.GetModule(modId);
                int userId = int.Parse("0" + ""/*HttpContext.Session.GetString("UserId")*/);
                var groupModUser = await moduleService.GetGroupModByUserId(userId);
                RoleUser = groupModUser;
                var module = homeBus.ConvertFromViewModel(data);
                Title = module.ModulesInfo.ModuleName.GetLanguageTitle(await homeBus.LoadAllBtnLanguage());
                ModuleInfo = module;
                var cb = module.FieldsInfo.Where(x => !String.IsNullOrEmpty(x.ListSource));
                var scdType = module.FieldsInfo.Select(x => x.ConditionType);
                if (cb.Any())
                {
                    var codeInfoParram = cb.Select(x => new CodeInfoParram
                    {
                        CtrlType = x.ControlType,
                        Name = x.FieldName,
                        ListSource = x.ListSource
                    });
                    //var para = string.Join("", sources);
                    var sourceCodeInfo = cb.Where(x => x.ListSource.Contains(":"));//Lấy những thông tin các ListSource từ DefCode
                    var codeInfoModels = new List<CodeInfoModel>();
                    if (sourceCodeInfo != null && sourceCodeInfo.Any())
                    {
                        var defCodeAll = await homeBus.LoadAllDefCode();
                        var lstSource = sourceCodeInfo.Select(x => x.ListSource).ToList();
                        var cbDefCode = defCodeAll.Where(x => lstSource.Contains(":" + x.CodeType + "." + x.CodeName));
                        foreach (var item in sourceCodeInfo)
                        {
                            codeInfoModels.Add(new CodeInfoModel { Name = item.FieldName, CodeInfos = cbDefCode.Where(x => ":" + x.CodeType + "." + x.CodeName == item.ListSource).ToList() });
                        }
                    }
                    var dataCB = (await moduleService.GetCombobox(codeInfoParram.Where(x => !x.ListSource.Contains(":")).ToList()));//Lấy thông tin các Combobox theo Store
                    codeInfoModels.AddRange(dataCB.Data);
                    DataCombobox = codeInfoModels;
                }

                var modSearch = await homeBus.LoadModSearchByModId(modId);
                if (modSearch != null)
                {
                    var parrams = new List<string>();
                    if (!string.IsNullOrEmpty(parramMods))
                    {
                        var btnParramInfo = (List<ButtonParamInfo>)JsonConvert.DeserializeObject<List<ButtonParamInfo>>(parramMods);
                        var temp = btnParramInfo.Select(x => x.FieldName + " = '" + x.Value + "'");
                        parrams.AddRange(temp);
                    }
                    var query = "";
                    if (modSearch.QueryFormat.IndexOf("{0}") > 0)
                    {
                        if (modSearch.QueryFormat.IndexOf("{1}") > 0)
                        {
                            var currPage = 1;
                            var paging = String.Format(" RowNumber Between {0} AND {1}", (currPage - 1) * CommonMethod.PageSize, (currPage - 1) * CommonMethod.PageSize + CommonMethod.PageSize);
                            query = string.Format(modSearch.QueryFormat, Schema, parrams.Any() ? String.Join(" AND ", parrams) : " 1=1 ", paging);
                            //ViewBag.CurrPage = currPage;
                        }
                        else
                        {
                            query = string.Format(modSearch.QueryFormat, Schema, parrams.Any() ? String.Join(" AND ", parrams) : " 1=1 ");
                        }
                    }
                    else
                    {
                        query = String.Format(modSearch.QueryFormat, Schema);
                    }
                    var dataGrid = await moduleService.LoadQueryModule(new ParramModuleQuery { Store = query });

                    //var dataGrid = await _moduleService.LoadQueryModule(new ParramModuleQuery { Store = modSearch.QueryFormat });
                    DataSearch = dataGrid;
                }

                //eturn View("Search", modId);
            }
            catch (Exception ex)
            {

                //return View("Search", modId);
            }
        }

    }

